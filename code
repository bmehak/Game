import pygame
import math
import time  # Import the time module for managing cooldown

pygame.init()
window = pygame.display.set_mode((1600, 950))
pygame.display.set_caption('Water Shooter')
clock = pygame.time.Clock()
running = True

# Load images
surf = pygame.image.load('back.jpeg')
fire = pygame.image.load('fire.jpg')
ob_image = pygame.image.load('sub1.png')
player = pygame.image.load('sub2.jpg')

# Load music
pygame.mixer.music.load('arcade.mp3')
pygame.mixer.music.play(-1)

# Initial positions
x = 1100
y = 300
obstacle_positions = [50, 200, 350, 500, 650]  # Starting Y positions for obstacles

# Animation parameters
time_var = 0
speed = 0.02  # Controls the speed of the vertical motion
horizontal_amplitude = 30  # Horizontal movement range

# Projectile list
projectiles = []

# Projectile class
class Projectile:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.speed = 10  # Speed of the projectile

    def update(self):
        self.x -= self.speed  # Move left

    def draw(self, surface):
        surface.blit(fire, (self.x, self.y))

# Shooting control variables
can_shoot = True
shoot_delay = 0.2  # Time in seconds
last_shot_time = 0  # Timestamp of the last shot

while running:
    # Background
    window.blit(surf, (0, 0))
    
    # Update and draw obstacles
    for i in range(len(obstacle_positions)):
        # Move the obstacles up and down using a sine wave
        vertical_offset = math.sin(time_var + i) * 20  # Vertical movement
        horizontal_offset = math.sin(time_var + i) * horizontal_amplitude  # Horizontal movement
        window.blit(ob_image, (horizontal_offset, obstacle_positions[i] + vertical_offset))

    # Draw player
    window.blit(player, (x, y))

    # Update and draw projectiles
    for projectile in projectiles:
        projectile.update()
        projectile.draw(window)

    # Event loop
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    keys = pygame.key.get_pressed()

    # Player movement
    if keys[pygame.K_LEFT] and x >= 400:
        x -= 8
    if keys[pygame.K_RIGHT] and x < 1200:
        x += 8
    if keys[pygame.K_UP] and y > -50:  # Prevent moving off the top
        y -= 8
    if keys[pygame.K_DOWN] and y < 650:  # Prevent moving off the bottom
        y += 8

    # Shooting logic
    current_time = time.time()  # Get the current time
    if keys[pygame.K_SPACE] and can_shoot:  # Press space to shoot if allowed
        projectiles.append(Projectile(x + 50, y + 20))  # Start projectile slightly right of player
        can_shoot = False  # Set shooting to not allowed
        last_shot_time = current_time  # Record the time of the shot

    # Check if enough time has passed to allow shooting again
    if not can_shoot and current_time - last_shot_time >= shoot_delay:
        can_shoot = True  # Allow shooting again

    # Increment time for obstacle movement
    time_var += speed

    # Update display
    pygame.display.update()
    clock.tick(60)

pygame.quit()
